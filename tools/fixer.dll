import os
import subprocess
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, IntPrompt
from rich.table import Table

console = Console()

BANNER = """
    _______               
   / ____(_)  _____  _____
  / /_  / / |/_/ _ \\/ ___/
 / __/ / />  </  __/ /    
/_/   /_/_/|_|\\___/_/     
"""

FORMATS = ['mp4', 'mkv', 'webm', 'mov']
RESOLUTIONS = ['1080p', '720p', '480p', '360p']

DOWNLOAD_DIR = 'downloaded'
FIXED_DIR = 'fixed'
M3U8_DIR = 'm3u8-downloads'

os.makedirs(DOWNLOAD_DIR, exist_ok=True)
os.makedirs(FIXED_DIR, exist_ok=True)
os.makedirs(M3U8_DIR, exist_ok=True)

def draw_banner():
    console.print(Panel(BANNER, style="red", expand=False, border_style="red"))

def list_downloaded_files():
    files = os.listdir(DOWNLOAD_DIR)
    if not files:
        console.print(Panel("No files found in 'downloaded/' folder.", style="yellow"))
        return []
    
    table = Table(title="Downloaded Videos", title_style="bold blue", border_style="blue")
    table.add_column("No.", style="green", justify="right")
    table.add_column("Filename", style="yellow")
    for i, file in enumerate(files, 1):
        table.add_row(str(i), file)
    console.print(table)
    return files

def convert_format(file, fmt):
    output_file = os.path.join(FIXED_DIR, os.path.splitext(file)[0] + '.' + fmt)
    input_path = os.path.join(DOWNLOAD_DIR, file)
    console.print(Panel(f"Converting to {fmt}...", style="blue"))
    subprocess.run(['ffmpeg', '-y', '-i', input_path, output_file])
    console.print(Panel(f"Saved: {output_file}", style="green"))

def convert_resolution(file, resolution):
    res_map = {
        '1080p': '1920x1080',
        '720p': '1280x720',
        '480p': '854x480',
        '360p': '640x360'
    }
    output_file = os.path.join(FIXED_DIR, os.path.splitext(file)[0] + f'_{resolution}.mp4')
    input_path = os.path.join(DOWNLOAD_DIR, file)
    console.print(Panel(f"Changing resolution to {resolution}...", style="blue"))
    subprocess.run(['ffmpeg', '-y', '-i', input_path, '-vf', f"scale={res_map[resolution]}", output_file])
    console.print(Panel(f"Saved: {output_file}", style="green"))

def download_m3u8():
    url = Prompt.ask("[yellow]Enter m3u8 URL[/yellow]")
    output_path = os.path.join(M3U8_DIR, '%(title)s.%(ext)s')
    console.print(Panel("Downloading with yt-dlp...", style="blue"))
    subprocess.run(['yt-dlp', '-o', output_path, url])
    console.print(Panel("Download complete.", style="green"))

def merge_audio_video():
    files = list_downloaded_files()
    if len(files) < 2:
        console.print(Panel("You need at least two files to merge (one audio, one video).", style="red"))
        return

    video_index = IntPrompt.ask("[yellow]Enter number for video file[/yellow]") - 1
    if not (0 <= video_index < len(files)):
        console.print(Panel("Invalid video selection.", style="red"))
        return

    audio_index = IntPrompt.ask("[yellow]Enter number for audio file[/yellow]") - 1
    if not (0 <= audio_index < len(files)):
        console.print(Panel("Invalid audio selection.", style="red"))
        return

    video_path = os.path.join(DOWNLOAD_DIR, files[video_index])
    audio_path = os.path.join(DOWNLOAD_DIR, files[audio_index])
    output_file = os.path.join(FIXED_DIR, f"merged_{os.path.splitext(files[video_index])[0]}.mp4")

    console.print(Panel("Merging video and audio...", style="blue"))
    subprocess.run(['ffmpeg', '-y', '-i', video_path, '-i', audio_path, '-c:v', 'copy', '-c:a', 'aac', output_file])
    console.print(Panel(f"Merged file saved to: {output_file}", style="green"))

def main_menu():
    while True:
        draw_banner()
        console.print(Panel(
            "[green]1.[/green] Convert File Format\n"
            "[green]2.[/green] Convert Resolution\n"
            "[green]3.[/green] Download m3u8\n"
            "[green]4.[/green] Merge Audio & Video\n"
            "[green]5.[/green] Exit",
            style="blue", title="Main Menu", border_style="green"
        ))
        choice = IntPrompt.ask("[yellow]Choose an option[/yellow]")
        
        if choice == 1:
            files = list_downloaded_files()
            if not files: continue
            file_index = IntPrompt.ask("[yellow]Enter file number to convert format[/yellow]") - 1
            if not (0 <= file_index < len(files)): continue
            file = files[file_index]

            console.print(Panel(
                "\n".join([f"[green]{i+1}.[/green] {fmt}" for i, fmt in enumerate(FORMATS)]),
                title="Select Format", style="red"
            ))
            fmt_index = IntPrompt.ask("[yellow]Choose format[/yellow]") - 1
            if 0 <= fmt_index < len(FORMATS):
                convert_format(file, FORMATS[fmt_index])

        elif choice == 2:
            files = list_downloaded_files()
            if not files: continue
            file_index = IntPrompt.ask("[yellow]Enter file number to convert resolution[/yellow]") - 1
            if not (0 <= file_index < len(files)): continue
            file = files[file_index]

            console.print(Panel(
                "\n".join([f"[green]{i+1}.[/green] {res}" for i, res in enumerate(RESOLUTIONS)]),
                title="Select Resolution", style="red"
            ))
            res_index = IntPrompt.ask("[yellow]Choose resolution[/yellow]") - 1
            if 0 <= res_index < len(RESOLUTIONS):
                convert_resolution(file, RESOLUTIONS[res_index])

        elif choice == 3:
            download_m3u8()

        elif choice == 4:
            merge_audio_video()

        elif choice == 5:
            console.print(Panel("Goodbye!", style="red"))
            break

        else:
            console.print(Panel("Invalid option!", style="red"))

if __name__ == "__main__":
    main_menu()
